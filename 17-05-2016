Spotkanie 10:30 - 11:30

Agenda:
1. Kontrakt
2. Spotkania offline / Cotygodniowe spotkania na peer programming
3. Etapy programu techjump
4. Co ty byś uznał jako sukces tego programu?
5. Projektowanie systemu

1. Kontrakt
- Jesteśmy w 100% szczerzy, wyrozumiali, nikt się nie obraża za konstruktywną krytykę, staramy się poprawić
- Jeśli coś nam się nie podoba, to od razu informujemy drugą stronę
- Większa część pracy spoczywa na mentee
- Dokumentuje wszystkie pytania / watpliwosci itd

2. - mamy 4h tygodniowo, 16h w miesiacu
- Piątek? - zazwyczaj mniej rzeczy do zrobienia w pracy / nie ma release itd.

- 10:30 - 11:30 - Piątek - zarezerwować

- ustalenie dnia + godziny + salki

3. 	- Projektowanie systemu, modulow, interface'ow, zaleznosci pomiedzy nimi
	* stworzenie modulu
	* testy jednostkowe
	* podpiecie pod API
	* testy integracyjne (powtorz *)
In the background:
	- stworzenie srodowisk lokalnych / testowych / stage / produkcyjnych
	- deployment PAAS (heroku, openshift)
	- CI / CD (travis, gocd)
	- performance testing (seige, abenchmark, loadtest) / monitoring (new-relic, libratto etc)
	- tools:
		- backend: ginode, devtools, atom, istambul, mocha, audit.js, npm scripts, heroku toolbelt, yeoman, robomongo, eslint
		- front: caniuse, csstriggers

klient zwykly webowy
- plansza z statystykami
- statystyki podstawowe - response time 95 percentyl, 99 percentyl, 200 300 400 500 (new relic, libratto), skupiamy sie na heroku i jego pluginach i api tych pluginow
- rozkminic API new-relic'a
- angular 2.0 czy 1.5, socket.io 
- na poczatek server + API + prosty klient, pozniej panel do administracji


4. --- Projetk skonczony -> na pewno sukces
- przebrniecie przez wszystkie technologie / programy i zrozumienie ich, nauczenie się ich 

5. Jakbyś to zaprojektował w .net?
   Jakie funkcjonalności chciałbyś mieć?
   Czy chcesz mieć front-end do tego?
   Jak byś teraz to zaprojektował w JS/Node?

6. Napisać moduł który będzie:
- mierzy czas odpowiedzi serwera 
- pytał co zdefiniowany interwał czasowy jakiś zewnętrzny serwis / API
   a) setInterval ktory pyta niezaleznie od tego czy serwis zyje czy nie
   b) setTimeout ktory pyta z opoznieniem ktore jest dostosowane do dostpenosci systemu (czyli jak serwis padl to dajemy mu wiecej czasu na nastepna odpowiedz)
   c) pakiet podobny do cron'a w npm + jakis modul do cache'owania requestow (backoff'em)
- zapisywał statystyki do bazy danych
   a) prosty zapis do mongo za pomoca natywnego drivera
- wysyłał aktualizacje do klienta po websocketach

Prosty klient który łączy się do serwera i odbiera aktualizacje, wyświetlając prostą linijkę tekstu

7. Przeslac prezentacje mateusza z meet.js
